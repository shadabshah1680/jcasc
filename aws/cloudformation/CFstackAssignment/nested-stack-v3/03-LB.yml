AWSTemplateFormatVersion: 2010-09-09
Description: "Testing Creation of VPc,subnet,Route Table, Sec-Groups, EC2-Instances, DB instances etc"
# This CloudFormation template deploys a basic VPC / Network. 

Parameters:
  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.
  
  EC2KeyName:
    Description: Name of an EC2 KeyPair to enable SSH access to the instance.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  Environment:
    Type: String
    Default: Test
    AllowedValues:
      - Test
      - Production
      - Development
    Description: Enter Environment name for your Stack. Default is Test.

  # parameters that are passed from root Stack
  # Network
  VPCId: 
    Description: Create security group in this respective VPC
    Type: String
  
  PrivateSubnetA: 
    Description: Private subnet in us-west-2-a
    Type: String
  
  PrivateSubnetB: 
    Description: Private subnet in us-west-2-b
    Type: String
  
  PublicSubnetA: 
    Description: Public subnet in us-west-2-a
    Type: String
  
  PublicSubnetB: 
    Description: Public subnet in us-west-2-a
    Type: String
  
#Sec Groups
  LoadBalancerSecGroup:
    Description: Security group for ALB
    Type: String

  DBSecurityGroup:
    Description: Security group for DB
    Type: String

  LaunchTemplateSecurityGroup:
    Description: Security group for LT
    Type: String
    
  WebServerSecurityGroup:
    Description: Security group for Public Servers
    Type: String

      
Mappings:
  MyRegionMap:
    us-west-2:
      HVM64: ami-098e42ae54c764c35
    us-east-2:
      HVM64: ami-051dfed8f67f095f5
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044    


Resources:
# #Create an Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ['', ["shadab-", !Ref Environment, "-ALB" ]]
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref LoadBalancerSecGroup
      Subnets: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB

  ALBListner:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward 
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

# Create a Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: !Join ['', ["shadab-", !Ref Environment, "-Server-TG" ]]
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId:  !Ref VPCId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'

# Internal Network Load Balancer
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ['', ["shadab-", !Ref Environment, "-NLB" ]]
      Scheme: internal
      Type: network
      Subnets: 
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetA
  NLBListner:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward 
          TargetGroupArn: !Ref NLBTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 3306
      Protocol: TCP

# Create a Target Group
  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      HealthCheckProtocol: TCP
      Name: !Join ['', ["shadab-", !Ref Environment, "-DB-TG" ]]
      Port: 3306
      Protocol: TCP
      Targets:
        - Id: !Ref MyDBInstance
          Port: 3306
      TargetType: instance
      VpcId:  !Ref VPCId


  # Role for SSM
  SSMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Join ['', ["shadab-", !Ref Environment, "-SSM-Policy" ]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:DescribeAssociation'
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                Resource: '*'
  SSMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref SSMRole

# A Public Instance used to SSH in Private Resources
  MyPublicInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !Ref InstanceTypeParameter
      SubnetId: !Ref PublicSubnetA
      KeyName:  !Ref EC2KeyName
      IamInstanceProfile: !Ref SSMInstanceProfile
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      Tags:
      - Key: Name
        Value:  !Join ['', ["shadab-", !Ref Environment, "-Public-EC2" ]]
      UserData:
        Fn::Base64: |
            #!/bin/bash
            # yum install httpd -y

# Launch Template for WebServers
  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Join ['', ["shadab-", !Ref Environment, "-ASG-LT" ]]
      LaunchTemplateData:
        ImageId: !FindInMap
          - MyRegionMap
          - !Ref 'AWS::Region'
          - HVM64
        InstanceType: !Ref InstanceTypeParameter
        KeyName: !Ref EC2KeyName
        IamInstanceProfile:
          Name: !Ref SSMInstanceProfile        
        Monitoring:
          Enabled: true
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
        UserData:
          Fn::Base64: 
             !Sub |
            #!/bin/bash
            sudo yum update -y
            access_token=$(aws ssm get-parameter --name "git_access_token_ss1680" --query 'Parameter.Value' --region us-east-1 --with-decryption --output text 2>&1 | sed 's/.*----BEGIN/----BEGIN/')
            db_username=$(aws ssm get-parameter --name db_username --query 'Parameter.Value' --region us-east-1 --output text)
            db_user_password=$(aws ssm get-parameter --name db_user_password --query 'Parameter.Value' --region us-east-1 --output text)
            db_name=$(aws ssm get-parameter --name db_name --query 'Parameter.Value' --region us-east-1 --output text)
            export db_host="${NetworkLoadBalancer.DNSName}"
            sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2 -y
            sudo yum install httpd -y 
            sudo systemctl enable httpd
            sudo systemctl start httpd php-fpm
            sudo usermod -a -G apache ec2-user
            sudo yum install git -y
            git clone -b CloudFormation https://$access_token@github.com/shadabshah1680/Eurus_Work.git /tmp/tmp_repo
            sudo cp -rf /tmp/tmp_repo/aws/cloudformation/CFstackAssignment/blog/* /var/www/html
            sudo chown -R ec2-user:apache /var/www
            sudo chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \;
            find /var/www -type f -exec sudo chmod 0664 {} \;
            sudo yum install jq -y
            # aws configure set region us-east-2
            # a=`aws elbv2 describe-load-balancers --query 'LoadBalancers[*].DNSName' | jq -r 'to_entries[ ] | .value' | grep DBelb`
            sed -i "s/db_name/$db_name/g" /var/www/html/assest/db.php
            sed -i "s/user/$db_username/g" /var/www/html/assest/db.php
            sed -i "s/pass/$db_user_password/g" /var/www/html/assest/db.php
            sed -i "s/localhost/$db_host/g" /var/www/html/assest/db.php
            #echo "Hi from sahdab" > /var/www/html/index.html

  MyDBInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !Ref InstanceTypeParameter
      KeyName:  !Ref EC2KeyName
      IamInstanceProfile: !Ref SSMInstanceProfile
      SecurityGroupIds: 
        - !Ref DBSecurityGroup
      Tags:
      - Key: Name
        Value:  !Join ['', ["shadab-", !Ref Environment, "-DB" ]]
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y
          sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 
          db_username=$(aws ssm get-parameter --name db_username --query 'Parameter.Value' --region us-east-1 --output text)
          db_user_password=$(aws ssm get-parameter --name db_user_password --query 'Parameter.Value' --region us-east-1 --output text)
          db_name=$(aws ssm get-parameter --name db_name --query 'Parameter.Value' --region us-east-1 --output text)
          sudo yum update -y
          sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 
          sudo yum install -y httpd
          sudo yum install mysql-server -y
          sudo systemctl enable mariadb
          sudo systemctl start mariadb
          sudo yum install git -y 
          git clone -b master  https://github.com/KhalidLam/PHP-Blog.git /tmp/shadab
          mysql -h localhost -u root -e "create database blog"
          cat /tmp/shadab/blog.sql | mysql -h localhost -u root blog
          mysql -h localhost -u root -e "CREATE USER '$db_username'@'%' IDENTIFIED BY '$db_user_password'"
          mysql -h localhost -u root -e "GRANT ALL PRIVILEGES ON $db_name.* TO '$db_username'@'%' WITH GRANT OPTION"
          sudo yum -y install expect
          MYSQL_PASS=$db_user_password
          myPid=$!
          echo "--> Wait 7s to boot up MySQL on pid ${myPid}"
          sleep 7
          echo "--> Set root password"
          expect -f - <<-EOF
            set timeout 10
            spawn mysql_secure_installation
            expect "Enter current password for root (enter for none):"
            send -- "\r"
            expect "Set root password?"
            send -- "y\r"
            expect "New password:"
            send -- "${MYSQL_PASS}\r"
            expect "Re-enter new password:"
            send -- "${MYSQL_PASS}\r"
            expect "Remove anonymous users?"
            send -- "y\r"
            expect "Disallow root login remotely?"
            send -- "n\r"
            expect "Remove test database and access to it?"
            send -- "y\r"
            expect "Reload privilege tables now?"
            send -- "y\r"
            expect eof
          EOF
          echo "--> Kill MySQL on pid ${myPid}"
          kill -9 ${myPid}  
      SubnetId: !Ref PrivateSubnetB

Outputs:
  LoadBalancerTGARN:
    Description: Returns ARN of ALB Target Group
    Value: !Ref ALBTargetGroup
    # Export:
    #   Name: !Join ['', ["shadab-", !Ref Environment, "-Server-TG" ]]
  LaunchTemplateID:
    Description: Returns ID of Launch Template
    Value:  !Ref WebServerLaunchTemplate
    # Export:
    #   Name: !Join ['', ["shadab-", !Ref Environment, "-ASG-LT" ]]
  LaunchTemplateVersion:
    Description: Returns ID of Launch Template Version number
    Value:  !GetAtt WebServerLaunchTemplate.LatestVersionNumber
    # Export:
    #   Name: !Join ['', ["shadab-", !Ref Environment, "-ASG-LT-v" ]]
  ALBDNS:
    Description: Application Load Balancer DNS
    Value: !GetAtt ApplicationLoadBalancer.DNSName