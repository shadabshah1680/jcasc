AWSTemplateFormatVersion: 2010-09-09
Description: "Creation of VPc,subnet,Route Table, Sec-Groups for AWS CloudFormation Assignment"
# This CloudFormation template deploys a basic VPC / Network. 

Parameters:
  NumberOfAZs:
    Type: Number
    AllowedValues:
    - 1
    - 2
    - 3
    Default: 2
    Description:  How many Availability Zones do you wish to utilize?
  
  PrivateSubnets:
    Type: String
    AllowedValues:
    - True
    - False
    Default: True
    Description: Do you want to create private subnets in addition to public subnets?

  Environment:
    Type: String
    Default: Test
    AllowedValues:
      - Test
      - Production
      - Development
    Description: Enter Environment name for your Stack. Default is Test.

  

# These Conditions specify Creation of subnets(Public/Private) in VPC
Conditions:
  BuildPublicB:         !Not [ !Equals [ !Ref NumberOfAZs, 1 ]] 
  BuildPublicC:         !Equals [ !Ref NumberOfAZs, 3 ]   
  BuildPrivateSubnets:  !Equals [ !Ref PrivateSubnets, True ]
  BuildPrivateA:        !Equals [ !Ref PrivateSubnets, True ]
  BuildPrivateB:        !And [ !Not [ !Equals [ !Ref NumberOfAZs, 1 ]], !Equals [ !Ref PrivateSubnets, True ]]
  BuildPrivateC:        !And [ !Equals [ !Ref NumberOfAZs,3], !Equals [ !Ref PrivateSubnets, True]]

Resources:
  # First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Description: "Test VPC for Assignment"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        #Value:  "shadab-cfn-Assignment-VPC"
        Value:  !Join ['-', ["shadab", !Ref Environment, "VPC" ]]

  # VPC Internet access:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
      - Key: Name
        Value: !Join ['-', ["shadab", !Ref Environment, "IGW" ]]
    
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: InternetGateway
    # you can't attach an IGW to a VPC unless both are created
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
      MapPublicIpOnLaunch: true

      Tags:
      - Key: Name
        Value: !Join ['-', ["shadab", !Ref Environment, "Public-A" ]]  
  
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicB  # B subnet will only be created if we select more than two AZ

    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the first AZ in the list
      MapPublicIpOnLaunch: true

      Tags:
      - Key: Name
        Value: !Join ['-', ["shadab", !Ref Environment, "Public-B" ]]
  
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicC  # C subnet will only be created if we select more than two AZ
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ]    # Get the second AZ in the list 
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join ['-', ["shadab", !Ref Environment, "Public-C" ]]
  
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateA
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list 
      Tags:
      - Key: Name
        Value: !Join ['-', ["shadab", !Ref Environment, "Private-A" ]]
  
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list 
      Tags:
      - Key: Name
        Value: !Join ['-', ["shadab", !Ref Environment, "Private-B" ]]
  
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ]    # Get the second AZ in the list 
      Tags:
      - Key: Name
        Value: !Join ['-', ["shadab", !Ref Environment, "Private-C" ]]
  
  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['-', ["shadab", !Ref Environment, "Public-RT-1" ]]
  
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway 
  

    # A NAT Gateway:
  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: BuildPrivateSubnets
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Join ['-', ["shadab", !Ref Environment, "NAT" ]]
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Condition: BuildPrivateSubnets
    Properties:
      Domain: VPC  
  # Here is the Private Route Table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref VPC
      Tags: 
      - Key: Name
        Value: !Join ['-', ["shadab", !Ref Environment, "Private-RT-2" ]]

  PrivateRoute1: # Private route Table can access through NAT
    Type: AWS::EC2::Route
    Condition: BuildPrivateSubnets
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway


  # Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:   

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicB
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicC
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
  
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateA
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateB
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateC
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable


Outputs:
  VPCID:
    Description: Returns VPCId
    Value: !Ref VPC
    Export:
      Name: !Join ['-', ["shadab", !Ref Environment, "VPC" ]]
  
  PublicSubnetA:
    Description: Returns the ID of the Public subnet A.
    Value: !Ref PublicSubnetA
    Export: 
      Name: !Join ['-', ["shadab", !Ref Environment, "Public-A" ]]  

  PublicSubnetB:
    Description: Returns the ID of the Public subnet B.
    Value: !Ref PublicSubnetB
    Condition: BuildPublicB
    Export: 
      Name: !Join ['-', ["shadab", !Ref Environment, "Public-B" ]] 

  PublicSubnetC:
    Description: Returns the ID of the Public subnet C.
    Value: !Ref PublicSubnetC
    Condition: BuildPublicC
    Export: 
      Name: !Join ['-', ["shadab", !Ref Environment, "Public-C" ]] 

  PrivateSubnetA:
    Description: Returns the ID of the Private subnet A.
    Value: !Ref PrivateSubnetA
    Condition: BuildPrivateA
    Export: 
      Name: !Join ['-', ["shadab", !Ref Environment, "Private-A" ]] 

  PrivateSubnetB:
    Description: Returns the ID of the Private subnet B.
    Value: !Ref PrivateSubnetB
    Condition: BuildPrivateB
    Export: 
      Name: !Join ['-', ["shadab", !Ref Environment, "Private-B" ]] 

  PrivateSubnetC:
    Description: Returns the ID of the Private subnet C.
    Value: !Ref PrivateSubnetC
    Condition: BuildPrivateC
    Export: 
      Name: !Join ['-', ["shadab", !Ref Environment, "Private-C" ]] 
